#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Compare the current output of neurofield against the stored data for the
configuration files in configs/.

USAGE:
  config_compare.py [options]
  See,
  config_compare.py --help

OPTIONS:
   --conf=filename.conf : the configuration file to use.
   --help               : print a help message (autogenerated by argparse).

EXAMPLES:
  #Compare current Vs stored 'example.conf', plotting an overlay and diff for node 0.
  #From the main neurofield directory run:
  ./utils/configs_compare.py --conf=example.conf --overlay --diff

REQUIRES:
  Recommend using Anaconda on Linux.
  numpy
  matplotlib

.. moduleauthor:: Stuart Knock <>
"""

__version__ = '0.1.4'

# First, import from python standard library
import logging
logging.basicConfig(level=logging.DEBUG)
LOG = logging.getLogger(__name__)
import sys
import os
import gzip
import shutil

# Then standard Python packages
import numpy
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot

# Then, try importing less reliable packages
try:
    import neurofield
except ImportError:
    LOG.error("Failed to import neurofield.py...")
    raise
###########################################################################

# Function definitions
def plot_overlay(stored, current, trace, node=0):
    fig = pyplot.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel('time (s)')
    ax.set_ylabel(trace)
    ax.set_title("Overlay for node %s" % stored.nodes[trace][node])
    ax.plot(stored.time, stored.data[trace][:, node], 'b')
    ax.plot(current.time, current.data[trace][:, node], 'r')

def plot_diff(stored, current, trace, node=0):
    fig = pyplot.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel('time (s)')
    ax.set_ylabel('Diff of %s' % trace)
    ax.set_title("Diff for node %s" % stored.nodes[trace][node])
    diff = current.data[trace][:, node] - stored.data[trace][:, node]
    ax.plot(current.time, diff, 'r')

def plot_surface(trace):
    raise NotImplementedError

def plot_surface_diff(trace):
    raise NotImplementedError

def plot_surface_movie(trace):
    raise NotImplementedError

def find_file(filename, path):
    """Find and return the path to file 'filename' in 'path'."""
    for root_dir, _, files in os.walk(path):
        if filename in files:
            return os.path.join(root_dir, filename)

###########################################################################

if __name__ == "__main__":

    #Parse arguments
    import argparse
    PARSER = argparse.ArgumentParser(
        description="Compare the current output of neurofield to stored output.")

    #Configuration file
    PARSER.add_argument('-c', '--conf',
                        default='onepop.conf',
                        help="Name of the .conf file you want to check.")

    PARSER.add_argument('--trace',
                        default='propagator.1.phi',
                        help="Name of the trace to look at.")

    PARSER.add_argument('--node',
                        type=int,
                        default=0,
                        help="Node to look at (0-based indexing).")

    PARSER.add_argument('--overlay',
                        action='store_true',
                        default='False',
                        help="Use this flag to turn on overlay plotting.")

    PARSER.add_argument('--diff',
                        action='store_true',
                        default='False',
                        help="Use this flag to turn on diff plotting.")

    PARSER.add_argument('--surface',
                        action='store_true',
                        default='False',
                        help="Use this flag to turn on surface plotting.")

    #version arg
    PARSER.add_argument('--version',
                        action='version',
                        version=__version__,
                        help="Displays version information.")
    #Logging arg
    PARSER.add_argument("--verbosity",
                        type=int,
                        choices=[0, 1, 2, 3],
                        default=2,
                        help="""Set the logging verbosity: 0=ERROR; 1=WARNING;
                                2=INFO; 3=DEBUG.""")
    ARGS = PARSER.parse_args()
    #######################################################################
    #import pdb; pdb.set_trace()

    #Set the logging level
    LOGLEVELMAPPING = ["ERROR", "WARNING", "INFO", "DEBUG"]
    LOG.setLevel(LOGLEVELMAPPING[ARGS.verbosity])
    #######################################################################

    # Main script

    #Identify paths.
    script_path = os.path.dirname(os.path.realpath(__file__))
    nf_path = os.path.abspath(os.path.join(script_path, os.pardir))
    configs_dir = os.path.join(nf_path, 'configs')
    test_data_dir = os.path.join(nf_path, 'test', 'data', 'configs')

    #Configuration file.
    config_filename = os.path.basename(ARGS.conf)
    config_name = os.path.splitext(config_filename)[0]
    config_filepath = find_file(config_filename, configs_dir)
    #config_dir = os.path.dirname(config_filepath)

    #Stored test data from configuration file.
    stored_filename = '%s.output.gz' % config_name
    stored_filepath = find_file(stored_filename, test_data_dir)

    #Copy the stored data to a temporary file
    tmp_stored_filepath = '/tmp/neurofield_stored_%s.output' % config_name
    with gzip.open(stored_filepath, 'rb') as f_in, open(tmp_stored_filepath, 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)

    #Load the stored data into a neurofield object.
    stored = neurofield.NF(tmp_stored_filepath)

    #Run the config file with the current version, and load data to a neurofield object.
    current = neurofield.run(config_filepath)

    #If requested, plot overlay of stored and current traces.
    if ARGS.overlay is True:
        plot_overlay(stored, current, ARGS.trace, ARGS.node)

    #If requested, plot overlay of stored and current traces.
    if ARGS.diff is True:
        plot_diff(stored, current, ARGS.trace, ARGS.node)

    pyplot.show()
